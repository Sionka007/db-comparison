spring:
  application:
    name: db-comparison

  jpa:
    open-in-view: false   # dobra praktyka, brak otwartych sesji w widoku
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        generate_statistics: true
        jdbc.batch_size: 500
        order_inserts: true
        order_updates: true
        jdbc.batch_versioned_data: true

server:
  shutdown: graceful       # czytelne domknięcie przy restarcie

management:
  endpoint:
    prometheus:
      enabled: true
    health:
      probes:
        enabled: true      # /actuator/health/liveness, /readiness
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    tags:
      application: ${spring.application.name}
    export:
      prometheus:
        enabled: true
        step: 10s          # częstsze scrapowanie do wykresów „na żywo”
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
        "[db.operation.time]": true
        "[db.transaction.duration]": true
        "[db.join.duration]": true
        "[db.lock.wait]": true
      percentiles:
        "[http.server.requests]": 0.5, 0.95, 0.99
        "[db.operation.time]": 0.5, 0.95, 0.99
        "[db.transaction.duration]": 0.5, 0.95, 0.99
        "[db.join.duration]": 0.5, 0.95, 0.99
        "[db.lock.wait]": 0.5, 0.95, 0.99
      sla:
        "[http.server.requests]": 10ms, 50ms, 100ms, 500ms, 1s
        "[db.operation.time]": 1ms, 5ms, 10ms, 50ms, 100ms, 500ms, 1s, 5s
        "[db.transaction.duration]": 5ms, 10ms, 50ms, 100ms, 500ms, 1s, 5s
        "[db.join.duration]": 1ms, 5ms, 10ms, 50ms, 100ms, 500ms, 1s, 5s
        "[db.lock.wait]": 1ms, 5ms, 10ms, 50ms, 100ms, 500ms, 1s
      # ── doprecyzowanie zakresów, żeby p95/heatmapy były czytelne:
      minimum-expected-value:
        "[db.operation.time]": 1ms
        "[db.transaction.duration]": 1ms
        "[db.join.duration]": 1ms
        "[db.lock.wait]": 1ms
      maximum-expected-value:
        "[db.operation.time]": 30s
        "[db.transaction.duration]": 60s
        "[db.join.duration]": 60s
        "[db.lock.wait]": 30s

benchmark:
  recordCount: 1000
  threads: 16
  batchSize: 500
  warmupPercent: 5
  isolation: "READ_COMMITTED"

---
spring:
  config:
    activate:
      on-profile: mysql
  datasource:
    url: jdbc:mysql://localhost:3306/db_comparison?useSSL=false&allowPublicKeyRetrieval=true&rewriteBatchedStatements=true&cachePrepStmts=true&useServerPrepStmts=true&useUnicode=true&characterEncoding=UTF-8
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 32
      minimum-idle: 8
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      keepaliveTime: 300000   # 5 min keepalive na dłuższe testy
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect

---
spring:
  config:
    activate:
      on-profile: postgres
  datasource:
    url: jdbc:postgresql://localhost:5432/db_comparison?reWriteBatchedInserts=true
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 32
      minimum-idle: 8
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      keepaliveTime: 300000   # 5 min
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
